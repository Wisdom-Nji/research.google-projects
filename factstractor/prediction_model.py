# -*- coding: utf-8 -*-
"""Word Vector.ipynb
Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v2cEZ_IxUVefq_DMX2IF91dBMXKPfic9

python -m spacy download en_core_web_lg
"""

import spacy
import csv
import pickle
import sys
from sklearn import svm
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
import numpy as np


def load_fit_data( filename ):
    readfile = open( filename, 'rb')

    return pickle.load( readfile )

def write_to_csv_file(filename, data):
    with open(filename, mode='a+') as csvfile:
        csvfile_writer = csv.writer(
            csvfile,
            delimiter=',',
            quotechar='"',
            quoting=csv.QUOTE_NONNUMERIC)
        csvfile_writer.writerow( data )
        print("[+] File saved")


if __name__ == "__main__":
    DATASET_FILENAME = "data_gathering/data/dataset.csv"

    if len(sys.argv) < 2:
        print(">> Usage: --predict <input>|--train")

    elif sys.argv[1] == "--predict":
        nlp = spacy.load("en_core_web_lg")
        # TODO: This should be able to load the obj rather than just saving it [--load]
        try:
            predict_only = False
            try:
                input_text = sys.argv[2]
                predict_only = True
            except IndexError:
                input_text = input(f"(prediction|input)$_ ")
                if input_text == "exit()":
                    sys.exit(">> Leaving program")

            fit_filename = "trained_savefiles/trained_facts_classifier.obj"
            clf_svm_wv = load_fit_data( fit_filename )


            while 1:
                if input_text == "":
                    input_text = input(f"(prediction|input)$_ ")
                    if input_text == "exit()":
                        sys.exit(">> Leaving program")
                    continue
                test_input = [ input_text ]
                test_docs = [nlp(text) for text in test_input]
                test_input_vectors = [x.vector for x in test_docs]

                prediction = clf_svm_wv.predict( test_input_vectors )[0]
                # print(f"(prediction)$ ({test_input})_ {clf_svm_wv.predict( test_input_vectors )}")
                print(f"(prediction)$ ({test_input})_ {prediction}")

                save = input(f">> Save? yes|no|switch - [{fit_filename}]: ")
                save = save.lower()

                if save == 'yes':
                    write_to_csv_file( DATASET_FILENAME, [input_text, prediction] )
                if save == 'switch':
                    write_to_csv_file( DATASET_FILENAME, [input_text, input(f"--> prediction? ")] )

                if predict_only:
                    break
                else:
                    input_text = input(f"\n(prediction|input)$_ ")

                if input_text == "exit()":
                    sys.exit(">> Leaving program")
                    break
                '''
                TODO: make this happen
                if save == "yes":
                    write_to_dataset( fit_filename, input_text, prediction )
                '''

        except ValueError as valueError:
            print(valueError)
    else:
        print(">> Usage: --predict <input>|--train")


